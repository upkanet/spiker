<html>

<head>
    <title>Axorus - Spiker</title>
</head>
<style>
    body {
        background-color: black;
        font-family: Arial, Helvetica, sans-serif;
        color: white;
    }

    #data{
        border: 1px solid white;
    }

    #data td{
        width: 390px;
        text-align: center;
    }

    #data tr:hover, tr.selected{
        background-color: #1F1FAF;
        cursor: pointer;
    }

    #data thead{
        font-weight: bold;
        color: black;
        background-color: white;
    }

    a {
        color: white;
    }
</style>
<script src="js/jquery3.5.1.min.js"></script>
<script src="js/plotly-latest.min.js"></script>
<script>
    var layoutBlack = { paper_bgcolor: 'black', plot_bgcolor: 'black', font: { color: 'white' }, xaxis: {'title': '', ticksuffix:'', spikemode: 'toaxis'}, yaxis: {spikemode: 'toaxis'}, hovermode: 'closest' };
    
    function load(record,filename,electrode){
        $('#title').html(`${filename} / Electrode #${electrode}`);
        $.getJSON(`/${record}/${electrode}`, function (el) {
            console.log(el);
            var data = el.simplified_data
            var sample_rate = el.s_sample_rate;
            var d = {x: data.map((x,index) => index / sample_rate), y: data.map(x => x), type: 'line' };
            layoutBlack.xaxis.title = 'time';
            layoutBlack.xaxis.ticksuffix = 's';
            Plotly.newPlot('gElectrode', [d], layoutBlack);
            
            var spectrum_data = el.spectrum_data;
            $.getJSON(`/${record}/${electrode}/indexFreqRatio`, (ratio) => {
                var ds = {x: spectrum_data.map((x,k) => Math.round(k * ratio * 100)/100), y: spectrum_data.map(x => x), type: 'line' };
                layoutBlack.xaxis.title = 'frequency';
                layoutBlack.xaxis.ticksuffix = 'Hz';
                Plotly.newPlot('gSpectrum', [ds], layoutBlack);
            });
        });
    }

    function plotEdata(record,electrode,arrName,srateName,plotName,title,ticksuffix){
        $.getJSON(`/${record}/${electrode}`, function (el) {
            console.log(el);
            var data = el[arrName];
            var sample_rate = el[srateName];
            var d = {x: data.map((x,index) => index / sample_rate), y: data.map(x => x), type: 'line' };
            layoutBlack.xaxis.title = title;
            layoutBlack.xaxis.ticksuffix = ticksuffix;
            Plotly.newPlot(plotName, [d], layoutBlack);
        });
    }

    function toggleSel(tr){
        $('.selected').removeClass('selected');
        $(tr).toggleClass('selected');
    }

    function results(){
        var div = $('#data tbody');
        div.html('');
        $.getJSON('/results', (r) => {
            r.forEach(l => {
                div.append(`<tr onclick="load('${l[0]}','${l[1]}','${l[2]}');toggleSel(this)"><td>${l[1]}</td><td>${l[2]}</td><td>${l[3]}</td><td>${l[4]}</td><td>${l[5][0]}Hz / ${l[5][1]}Hz / ${l[5][2]}Hz / ${l[5][3]}Hz</td></tr>`);
            });         
        });
    }

    function sortTable(col = 1){
        var t = $('#data tbody')[0];
        var rows,switching, shouldSwitch;
        switching = true;
        while(switching){
            switching = false;
            rows = t.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[col];
                y = rows[i + 1].getElementsByTagName("TD")[col];
                if(Number(x.innerHTML.toLowerCase())>Number(y.innerHTML.toLowerCase())){
                    shouldSwitch = true;
                    break;
                }
            }
            if(shouldSwitch){
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }

    }

    $(document).ready(()=>{
        results();
    });

</script>

<body>
    <table id="data">
        <thead>
            <tr>
                <td>Filename</td><td onclick="sortTable();">Elec„ÄΩÔ∏è</td><td>Vmin</td><td>Vmax</td><td>Frequencies</td>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <p><a href="results/dl">üíæ Download CSV</a></p>
    <h3 id="title"></h3>
    <div id="gElectrode" style="width:100%;height:calc(50%-300px);"></div>
    <div id="gSpectrum" style="width:100%;height:calc(50%-300px);"></div>
    <div id="gPlot" style="width:100%;height:calc(50%-300px);"></div>
</body>

</html>